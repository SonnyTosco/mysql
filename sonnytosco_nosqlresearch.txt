NoSQL Databases

MySQL vs NoSQL
- A NoSQL (originally referring to "non SQL" or "non relational") database
provides a mechanism for storage and retrieval of data which is modeled in means
other than the tabular relations used in relational databases.
- increasingly used in big data and real-time web applications

Why use NoSQL?
- Motivations for this approach include: simplicity of design, simpler "horizontal"
scaling to clusters of machines (which is a problem for relational databases),
and finer control over availability. The data structures used by NoSQL databases
(e.g. key-value, wide column, graph, or document) are different from those used
by default in relational databases, making some operations faster in NoSQL. The
particular suitability of a given NoSQL database depends on the problem it must solve.

Types of NoSQL Databases
- Key-value stores
  - Key-value (KV) stores use the associative array (also known as a map or dictionary)
   as their fundamental data model. In this model, data is represented as a collection
   of key-value pairs, such that each possible key appears at most once in the collection.
  - The key-value model is one of the simplest non-trivial data models, and richer
    data models are often implemented as an extension of it. The key-value model can
    be extended to a discretely ordered model that maintains keys in lexicographic order.
    This extension is computationally powerful, in that it can efficiently retrieve selective key ranges.
  - Key-value stores can use consistency models ranging from eventual consistency to serializability.
  Some databases support ordering of keys. There are various hardware implementations,
  and some users maintain data in memory (RAM), while others employ solid-state drives or rotating disks.
Examples include Oracle NoSQL Database, Redis, and dbm.

- Document store
  - The central concept of a document store is the notion of a "document". While
  each document-oriented database implementation differs on the details of this definition,
  in general, they all assume that documents encapsulate and encode data (or information)
  in some standard formats or encodings. Encodings in use include XML, YAML, and
  JSON as well as binary forms like BSON. Documents are addressed in the database
  via a unique key that represents that document. One of the other defining characteristics
  of a document-oriented database is that in addition to the key lookup performed by a
  key-value store, the database offers an API or query language that retrieves documents based on their contents
  - Different implementations offer different ways of organizing and/or grouping documents:
      - Collections
      - Tags
      - Non-visible metadata
      - Directory hierarchies
  - Compared to relational databases, for example, collections could be considered
  analogous to tables and documents analogous to records. But they are different:
  every record in a table has the same sequence of fields, while documents in a
  collection may have fields that are completely different.

Handling Relational Data
- 3 main techniques for handling relational data in a NoSQL db
  - Multiple queries
    - Instead of retrieving all the data with one query, it's common to do several queries
    to get the desired data. NoSQL queries are often faster than traditional SQL queries
    so the cost of having to do additional queries may be acceptable. If an excessive number of
    queries would be necessary, one of the other two approaches is more appropriate.
  - Caching/replication/non-normalized data
    - Instead of only storing foreign keys, it's common to store actual foreign values along
    with the model's data. For example, each blog comment might include the username
    in addition to a user id, thus providing easy access to the username without requiring another lookup.
    When a username changes however, this will now need to be changed in many places in the database.
    Thus this approach works better when reads are much more common than writes.
  - Nesting data
    - With document databases like MongoDB it's commong to put more data in a smaller number
    of collections. For example, in a blogging application, one might choose to store comments
    within the blog post document so that with a single retrieval one gets all the comments.
    Thus in this approach a single document contains all the data you need for a specific task. 
